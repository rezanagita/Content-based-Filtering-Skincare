# -*- coding: utf-8 -*-
"""Sistem rekomendasi produk skincare.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zeQYPagsTekOWc8j0pcsc40kId6lcgho

# Business Understanding

Problem Statements dan Goals Berdasarkan kondisi yang telah diuraikan sebelumnya, proyek ini akan memberikan solusi menggunakan pendekatan machine learning sistem rekomendasi secara personalisasi dari **permasalahan** sebagai berikut:
  * Berdasarkan atribut dataset, Bagaimana cara membantu konsumen dalam memilih produk skincare yang sesuai dengan jenis dan kondisi kulit mereka secara akurat?
  * Seberapa efektif pendekatan content-based filtering dalam mengurangi risiko efek samping dari pemilihan produk yang tidak tepat dibandingkan dengan pendekatan tradisional?

Tujuan atau goals untuk menjawab pertanyaan tersebut sebagai berikut:
  * Menyediakan rekomendasi produk skincare yang dipersonalisasi berdasarkan atribut konten produk (jenis kulit, permasalahan kulit, dan kandungan bahan aktif) menggunakan dataset skincare dari Kaggle.
  * Menganalisis efektivitas pendekatan content-based filtering dalam mengurangi risiko efek samping seperti iritasi kulit, dengan membandingkan hasil rekomendasi terhadap pendekatan rekomendasi tradisional (misalnya rekomendasi populer atau umum).

## Setup Libraries

Pada tahapan awal yaitu mengimpor seluruh library yang dibutuhkan untuk proyek ini
"""

!pip install squarify

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import squarify
from wordcloud import WordCloud
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""## Load & Read Dataset

Tahapan kedua yaitu load dataset yang diambil dari kaggle, selanjutnya read data dan menemukan informasi awal
"""

from google.colab import files
files.upload()
! mkdir ~/.kaggle

# Menyalin kaggle.json ke dalam folder yang sudah dibuat
! cp kaggle.json ~/.kaggle/
!kaggle datasets download -d muhammadrefki/dataset-skincare

# Mengekstrak berkas zip ke direktori aktif
!unzip /content/dataset-skincare.zip

"""read dataset dengan nama variabel "skincare_product", memiliki 185 baris dan 9 columns yang terdiri dari ID produk, nama Brand, Ingredients, Jenis Produk, Tipe Kulit, Masalah Kulit, Ukuran produk, Bahan Aktif, Tahun Rilis.
Ada beberapa nama kolom yang perlu dirubah supaya lebih mudah dipahami untuk menggambarkan kolom tersebut sehingga tidak ambigu
"""

skincare_product = pd.read_csv('/content/dataset_skic.csv')
skincare_product

"""## Exploratory Data Analysis

Cakupan proses analis EDA untuk membantu menjawab beberapa pertanyaan berikut:
  * Berapa jumlah total produk skincare dalam dataset? & Apa saja kolom/fitur yang tersedia dalam dataset?
  * Bagaimana distribusi variabel dalam dataset?
  * Apakah ada fitur yang tidak berguna (redundant)?
  * Apakah ada nilai yang hilang (missing values)/ duplikat dalam dataset? Jika ya, di kolom mana saja dan seberapa besar proporsinya?
  * Bagaimana distribusi jenis kulit yang disasar oleh produk (misalnya: kering, berminyak, kombinasi, sensitif)?
  * Apa saja kategori permasalahan kulit yang paling umum ditemukan?

Deskripsi Variabel Berdasarkan informasi dari Kaggle, variabel-variabel pada skincare product dataset adalah sebagai berikut:

  - ID	: ID produk skincare
  - Brand	: Nama merek produk skincare
  - Nama Product :	Nama produk skincare
  - Jenis produk :	Kategori produk, misalnya pembersih, toner, serum, pelembap, atau tabir surya.
  - Jenis kulit	: Jenis kulit yang menjadi target produk, seperti normal, kering, berminyak, kombinasi, atau sensitif
  - Masalah kulit : 	Masalah Kulit yang dialami(Jerawat, lek hitam, dehidrasi
  - Ukuran :	Ukuran isi produk (misalnya: 50mL, 100mL, 250mL).
  - Bahan Aktif	: Daftar bahan aktif atau komposisi utama yang terkandung dalam produk.
  - Tahun Rilis : Tahun pembuatan/rilis product

### Informasi Data

Melihat informasi dari skincare_product.info() insight yang diperoleh yaitu
1. Terdapat 185 entri(baris) dan 9 kolom yang terdiri dari ID, Brand, Produk, Jenis Produk, Untuk Kulit, Masalah kulit, Ukuran, Tipe Bahan Aktif, Tahun Rilis
2. Semua kolom tidak ada yang missing value (non-null)
3. Ada 2 tipe data integer(2) dan objek(7)
4. Nama variabel dalam dataset ini kurang dapat dipahami, oleh karena itu perlu diubah menjadi nama variabel yang dpt dipahami
5. Tipe data Ukuran diubah menjadi numerik (integer) bukan objek
"""

skincare_product.info()

"""Melihat statistik pada skincare_product
1. skincare_product.describe() menampilkan statistik numerik saja, insight yg didapatkan :
   - Terdapat 185 data / ID
   - Produk dengan tahun rilis paling lama di tahun 2018 dan terbaru 2023 serta rata-rata rilis produk di tahun 2020
"""

skincare_product.describe()

"""Melihat statistik pada skincare_product
1. skincare_product.describe() menampilkan statistik numerik saja, insight yg didapatkan :
   - Terdapat 185 data / ID
   - Produk dengan tahun rilis paling lama di tahun 2018 dan terbaru 2023 serta rata-rata rilis produk di tahun 2020
2. skincare_product.describe(include='all') menampilkan seluruh statistik dari variabel dataset, insight yang didapatkan, merk produk paling top/ dipakai adalah "Avoskin", nama produk "ceramide barrier moisturizer
3. Masalah kulit paling banyak yaitu karena kusam
4. Statistik ini juga menampilkan bahwa semua data sebanyak 185 tidak ada missing value
"""

skincare_product.describe(include='all')

"""Menampilkan duplikat pada dataset skincare_product, dan hasilnya tidak ada duplikasi data."""

skincare_product.duplicated().sum()

print('Nama produk: ',skincare_product['Produk'].unique())

"""### Visualisasi"""

# Visualisasi Brand
plt.figure(figsize=(14, 8))
skincare_product['Brand'].value_counts().plot(kind='barh', color='orange')
plt.title('Distribusi Jumlah Produk per Brand')
plt.xlabel('Jumlah Produk')
plt.ylabel('Brand')
plt.tight_layout()
plt.show()

"""Melihat sebaran data tipe kulit dengan visualisasi terlihat bahwa tipe kulit paling banyak adalah kombinasi memiliki jumlah produk lebih dari 40"""

# Analisis bisnis - distribusi jenis kulit
if 'Untuk Kulit' in skincare_product.columns:
    print("\n=== DISTRIBUSI JENIS KULIT (TARGET MARKET) ===")
    skin_type_dist = skincare_product['Untuk Kulit'].value_counts()
    print(skin_type_dist)

    # Visualisasi target market
    plt.figure(figsize=(10, 6))
    skin_type_dist.plot(kind='bar')
    plt.title('Distribusi Target Jenis Kulit - Market Segmentation')
    plt.ylabel('Jumlah Produk')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Visualisasi Distribusi Produk berdasarkan Masalah kulit
# Hitung jumlah produk per masalah kulit
skin_issues = skincare_product['Masalah Kulit'].value_counts()

plt.figure(figsize=(10, 6))
skin_issues.plot(kind='barh', color='tomato')

plt.title('Distribusi Berdasarkan Masalah Kulit yang Ditargetkan')
plt.ylabel('Masalah Kulit')
plt.xlabel('Jumlah Produk')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Vidsualisasi distribusi Produk
product_types = skincare_product['Jenis Produk'].value_counts()
plt.figure(figsize=(10, 6))
product_types.plot(kind='bar', color='plum')

plt.title('Distribusi Produk Berdasarkan Jenis Produk Skincare')
plt.xlabel('Jenis Produk')
plt.ylabel('Jumlah Produk')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

#Visualisasi distribusi tipe bahan aktif
top_active = skincare_product['Tipe Bahan Aktif'].value_counts().nlargest(15)
labels = top_active.index + '\n' + top_active.astype(str)

plt.figure(figsize=(12, 7))
squarify.plot(sizes=top_active, label=labels, alpha=0.8, color=plt.cm.Paired.colors)
plt.axis('off')
plt.title('Treemap Distribusi Tipe Bahan Aktif Teratas')
plt.show()

# Visualisasi Produk Skincare
all_active_ingredients = ' '.join(skincare_product['Produk'].dropna().str.replace(',', ' '))

wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_active_ingredients)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud Produk Skincare')
plt.show()

"""Menampilkan distribusi outlier pada data categorikal, hasilnya tidak ada outlier"""

# Melihat outlier pada data kategorikal
categorical_cols = ['Brand', 'Produk', 'Jenis Produk', 'Untuk Kulit', 'Masalah Kulit', 'Tipe Bahan Aktif',]
for col in categorical_cols:
    plt.figure(figsize=(6, 4))
    sns.boxplot(data=skincare_product, x=col)
    plt.title(f'Distribusi dan Outlier untuk {col}')
    plt.tight_layout()
    plt.show()

# Melihat outlier pada data kategorikal
numeric_cols = ['Ukuran', 'Tahun Rilis']
for col in numeric_cols:
    plt.figure(figsize=(6, 4))
    sns.boxplot(data=skincare_product, x=col)
    plt.title(f'Distribusi dan Outlier untuk {col}')
    plt.tight_layout()
    plt.show()

"""## Data Preparation"""

# Mengubah Nama variabel
skincare_product = skincare_product.rename(columns={
    'Brand': 'Nama_Brand',
    'Produk': 'Nama_Produk',
    'Jenis Produk': 'Jenis_Produk',
    'Untuk Kulit': 'Jenis_Kulit',
    'Masalah Kulit': 'Masalah_Kulit',
    'Ukuran' : 'Ukuran(ML)',
    'Tipe Bahan Aktif': 'Ingredients',
    'Tahun Rilis': 'Tahun_Rilis'
})
skincare_product.tail()

# Menghapus kata ml dan Mengubah tipe data Ukuran
skincare_product['Ukuran(ML)'] = skincare_product['Ukuran(ML)'].str.replace('ml', '', case=False).str.strip()
skincare_product['Ukuran(ML)'] = pd.to_numeric(skincare_product['Ukuran(ML)'], errors='coerce')

skincare_product.info()

# Menghapus Kolom yang tidak diperlukan dalam modeling
# Kolom ID
skincare_product = skincare_product.drop(['ID'], axis=1)
skincare_product.head()

skincare_product.shape

"""Terlihat bahwa tipe data sudah berganti menjadi integer dan nama variabel sudah berganti menjadi nama yang mudah dipahami. Data sudah cukup clean, tidak ada missing value, duplikat, dan outlier. selain itu saya menghapus kolom yang tidak berpengaruh signifikan terhadap analisis proyek ini. hasil akhir menjadi 6 kolom

# Model Development Content Based Filtering
"""

data = skincare_product
data.sample(5)

data['Jenis_Produk'].unique()

data['Masalah_Kulit'].unique()

"""Menjawab Pertanyaan bisnis :
1. Kesulitan Konsumen dalam Memilih Produk Skincare yang Sesuai: Konsumen sering kali menghadapi kebingungan dalam memilih produk skincare yang sesuai dengan jenis kulit mereka (misalnya, kering, berminyak, kombinasi, atau sensitif) dan masalah kulit (seperti jerawat, dehidrasi, atau kusam) karena banyaknya variasi produk di pasaran.

**TF-IDF Vectorizer**
ekstraksi fitur dan vektorisasi konten produk  dengan tujuan : menyusun kemiripan antar produk agar sistem bisa menyarankan produk serupa yang aman dan cocok.
"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data Ingredient
tf.fit(data['Ingredients'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['Ingredients'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan Ingredients
# Baris diisi dengan Nama Produk

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.Nama_Produk
).sample(22, axis=1, replace=True).sample(10, axis=0)

"""## Cosine Similarity
Menghitung kemiripan dengan tujuan: Merekomendasikan produk yang mirip dengan preferensi user, tapi tetap aman dan cocok.
"""

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama produk
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['Nama_Produk'], columns=data['Nama_Produk'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap resto
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""## Mendapatkan Rekomendasi
dengan tujuan jika user menyukai satu produk, rekomendasikan produk yang mirip dan aman berdasarkan ingredients

| Tujuan                                        | Solusi Content-Based Filtering                                       |
| --------------------------------------------- | -------------------------------------------------------------------- |
| Membantu konsumen memilih produk sesuai kulit | Mirip berdasarkan kandungan, bukan iklan / rating                    |
| Mengurangi risiko efek samping                | Sistem hanya menyarankan produk dengan komposisi serupa              |
"""

def get_recommendations(product_name, cosine_sim=cosine_sim, df=data, num_recommendations=5):
    """
    Fungsi untuk mendapatkan rekomendasi produk berdasarkan content-based filtering

    Parameters:
    -----------
    product_name : str
        Nama produk yang ingin dicari rekomendasinya
    cosine_sim : array
        Matrix cosine similarity
    df : DataFrame
        DataFrame yang berisi data produk
    num_recommendations : int
        Jumlah rekomendasi yang diinginkan

    Returns:
    --------
    DataFrame : Rekomendasi produk dengan ingredient
    """

    # Cek apakah produk ada dalam dataset
    if product_name not in df['Nama_Produk'].values:
        print(f"Produk '{product_name}' tidak ditemukan dalam dataset!")
        return pd.DataFrame()

    # Dapatkan index produk
    idx = df[df['Nama_Produk'] == product_name].index[0]

    # Dapatkan similarity scores untuk produk tersebut
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan produk berdasarkan similarity score (descending)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Ambil top N produk (skip index 0 karena itu produk itu sendiri)
    sim_scores = sim_scores[1:num_recommendations+1]

    # Dapatkan index produk yang direkomendasikan
    product_indices = [i[0] for i in sim_scores]

    # Return rekomendasi produk
    recommendations = df.iloc[product_indices][['Nama_Brand','Nama_Produk', 'Jenis_Produk','Ingredient','Jenis_Kulit','Masalah_Kulit']].copy()

    # Tambahkan similarity score
    similarity_scores = [i[1] for i in sim_scores]
    recommendations['Similarity_Score'] = similarity_scores

    return recommendations

get_recommendations('Glow Boost Serum')

"""Menampilkan 5 rekomendasi serupa dengan nama produk **Glow Boost Serum** berdasarkan Nama Brand, Jenis produk, Jenis kulit, masalah kulit, Ingredients, dan nilai similarity

## Evaluasi
"""

def precision_evaluation(product_name, k=10, threshold=0.3):
    """
    Evaluasi precision otomatis berdasarkan similarity threshold
    """
    print(f"Evaluation: {product_name}")
    print("="*50)

    # Dapatkan rekomendasi
    recommendations = get_recommendations(product_name, num_recommendations=k)

    if recommendations.empty:
        print("No recommendations found!")
        return

    # Hitung yang relevan berdasarkan threshold
    relevant_recs = recommendations[recommendations['Similarity_Score'] > threshold]
    true_recommended = len(relevant_recs)

    # Hitung precision
    Precision = (true_recommended / k) * 100

    print(f"Threshold: {threshold}")
    print(f"Relevant recommendations: {true_recommended}/{k}")
    print(f"Precision of the model is {Precision}%")

    return Precision

precision_evaluation('Luminous Whitening Night Cream', k=10, threshold=0.7)

"""- Threshold 0.7 : produk sebagai rekomendasi yang valid kalau cosine similarity-nya ≥ 0.7.

- Relevant Recommendations: 10/10
Dari 10 produk yang direkomendasikan untuk Luminous Whitening Night Cream, semuanya (10 dari 10) dianggap relevan — artinya cocok dengan produk aslinya, berdasarkan definisi relevansi  (misalnya jenis kulit yang sama, ingredient mirip).
"""

get_recommendations('Daily Sunscreen SPF 50 PA+++')